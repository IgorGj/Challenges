import type { GetServerSideProps, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import BlogItem from "../../components/BlogItem";
import PageTitle from "../../components/PageTitle";
import { FeaturedBlog } from "../interfaces";

interface Props {
  products: FeaturedBlog[];
}

const Blog: NextPage<Props> = ({ products }) => {
  const router = useRouter();
  const { asPath } = router;
  console.log(asPath);

  const [category, setCategory] = useState<undefined | string>(undefined);
  const [anotherCategory, setAnotherCategory] = useState<undefined | string>(
    undefined
  );
  const [q, setQ] = useState<undefined | string>(undefined);
  const filters = [
    "Fashion",
    "Beauty",
    "Street Style",
    "Life Style",
    "DIY & Crafts",
  ];

  const deleteFilter = (whatToRemove: string) => {
    if (whatToRemove === "category") {
      setCategory(undefined);
      const localQuery = router.query;
      delete localQuery.category;
      router.push({
        query: localQuery,
      });
    } else if (whatToRemove === "search") {
      setQ(undefined);
      const localQuery = router.query;
      delete localQuery.q;
      router.push({
        query: localQuery,
      });
    }
  };

  const clickHandler = (filter: string) => {
    setCategory(filter.split(" ").join("").toLowerCase());
  };

  useEffect(() => {
    category &&
      category !== router.query.category &&
      router.push({
        query: {
          ...router.query,
          category,
        },
      });
  }, [category, router]);
  useEffect(() => {
    q &&
      q !== router.query.q &&
      router.push({
        query: {
          ...router.query,
          q,
        },
      });
  }, [q, router]);
  useEffect(() => {
    router.query.category && setCategory(router.query.category as string);
  }, [router]);
  useEffect(() => {
    router.query.q && setQ(router.query.q as string);
  }, [router]);

  return (
    <>
      <Head>
        <title>Store - Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title="Blog" />

      <section className="bg0 p-t-62 p-b-60">
        <div className="container">
          <div className="row">
            <div className="col-md-8 col-lg-9 p-b-80">
              <div className="p-r-45 p-r-0-lg">
                {/* blog item */}
                {products.length > 0 ? (
                  products.map((blog, index) => (
                    <BlogItem key={`blog-item-${index}`} blog={blog} />
                  ))
                ) : (
                  <p>There are no products based on your filter.</p>
                )}
              </div>
            </div>

            <div className="col-md-4 col-lg-3 p-b-80">
              <div className="side-menu">
                <form className="bor17 of-hidden pos-relative">
                  <input
                    className="stext-103 cl2 plh4 size-116 p-l-28 p-r-55"
                    type="text"
                    name="search"
                    placeholder="Search"
                    value={q}
                    // onFocus={() => deleteFilter("category")}
                    onChange={(e) => setQ(e.target.value.toLowerCase())}
                  />

                  <button
                    className="flex-c-m size-122 ab-t-r fs-18 cl4 hov-cl1 trans-04"
                    onClick={() => {
                      setQ(anotherCategory);
                    }}
                  >
                    <i className="zmdi zmdi-search"></i>
                  </button>
                </form>

                <div className="p-t-55">
                  <h4 className="mtext-112 cl2 p-b-33">Categories</h4>

                  <ul>
                    {filters.map((filter, index) => (
                      <li
                        key={`filter-${index}`}
                        className={
                          asPath.includes(filter.toLowerCase())
                            ? `bor18 active`
                            : "bor18"
                        }
                      >
                        <button
                          className={
                            asPath.includes(filter.split(" ")[0].toLowerCase())
                              ? "dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4 active"
                              : "dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4"
                          }
                          onClick={() => {
                            // deleteFilter("search");
                            clickHandler(filter);
                          }}
                        >
                          {filter}
                        </button>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const res = await fetch("http://localhost:5001/blogs");
  const blogData = await res.json();

  const featuredBlogsRes = await fetch("http://localhost:5001/blogs/?_limit=3");
  const featuredBlogsData = await featuredBlogsRes.json();

  const { category, q } = query;
  console.log(q);

  //localhost:5001/blogs?category_like=streetstyle
  // category ? `category_like=${category}`
  //localhost:5001/blogs?q=belt

  const resProd = await fetch(
    `http://localhost:5001/blogs?${q ? `q=${q}` : ""}&${
      category ? `category_like=${category}` : ""
    }`
  );
  const products = await resProd.json();
  return {
    props: {
      products,
      // featuredProductsData,
      featuredBlogsData,
    },
  };
};

export default Blog;
